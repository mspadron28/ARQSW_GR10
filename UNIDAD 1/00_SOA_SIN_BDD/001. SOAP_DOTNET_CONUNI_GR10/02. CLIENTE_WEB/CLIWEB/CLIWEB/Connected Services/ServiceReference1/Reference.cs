//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IConversionService")]
    public interface IConversionService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CentimetersToFeet", ReplyAction="http://tempuri.org/IConversionService/CentimetersToFeetResponse")]
        System.Threading.Tasks.Task<double> CentimetersToFeetAsync(double centimeters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/FeetToCentimeters", ReplyAction="http://tempuri.org/IConversionService/FeetToCentimetersResponse")]
        System.Threading.Tasks.Task<double> FeetToCentimetersAsync(double feet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/MetersToYards", ReplyAction="http://tempuri.org/IConversionService/MetersToYardsResponse")]
        System.Threading.Tasks.Task<double> MetersToYardsAsync(double meters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/YardsToMeters", ReplyAction="http://tempuri.org/IConversionService/YardsToMetersResponse")]
        System.Threading.Tasks.Task<double> YardsToMetersAsync(double yards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/InchesToCentimeters", ReplyAction="http://tempuri.org/IConversionService/InchesToCentimetersResponse")]
        System.Threading.Tasks.Task<double> InchesToCentimetersAsync(double inches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CentimetersToInches", ReplyAction="http://tempuri.org/IConversionService/CentimetersToInchesResponse")]
        System.Threading.Tasks.Task<double> CentimetersToInchesAsync(double centimeters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IConversionServiceChannel : ServiceReference1.IConversionService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class ConversionServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IConversionService>, ServiceReference1.IConversionService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ConversionServiceClient() : 
                base(ConversionServiceClient.GetDefaultBinding(), ConversionServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IConversionService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversionServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ConversionServiceClient.GetBindingForEndpoint(endpointConfiguration), ConversionServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversionServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ConversionServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversionServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ConversionServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ConversionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<double> CentimetersToFeetAsync(double centimeters)
        {
            return base.Channel.CentimetersToFeetAsync(centimeters);
        }
        
        public System.Threading.Tasks.Task<double> FeetToCentimetersAsync(double feet)
        {
            return base.Channel.FeetToCentimetersAsync(feet);
        }
        
        public System.Threading.Tasks.Task<double> MetersToYardsAsync(double meters)
        {
            return base.Channel.MetersToYardsAsync(meters);
        }
        
        public System.Threading.Tasks.Task<double> YardsToMetersAsync(double yards)
        {
            return base.Channel.YardsToMetersAsync(yards);
        }
        
        public System.Threading.Tasks.Task<double> InchesToCentimetersAsync(double inches)
        {
            return base.Channel.InchesToCentimetersAsync(inches);
        }
        
        public System.Threading.Tasks.Task<double> CentimetersToInchesAsync(double centimeters)
        {
            return base.Channel.CentimetersToInchesAsync(centimeters);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConversionService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IConversionService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/ConversionUnidades_SOAP/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ConversionServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IConversionService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ConversionServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IConversionService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IConversionService,
        }
    }
}
