//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cliente_Web_SOAP.ConversionUnidades {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConversionUnidades.IConversionService")]
    public interface IConversionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CentimetersToFeet", ReplyAction="http://tempuri.org/IConversionService/CentimetersToFeetResponse")]
        double CentimetersToFeet(double centimeters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CentimetersToFeet", ReplyAction="http://tempuri.org/IConversionService/CentimetersToFeetResponse")]
        System.Threading.Tasks.Task<double> CentimetersToFeetAsync(double centimeters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/FeetToCentimeters", ReplyAction="http://tempuri.org/IConversionService/FeetToCentimetersResponse")]
        double FeetToCentimeters(double feet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/FeetToCentimeters", ReplyAction="http://tempuri.org/IConversionService/FeetToCentimetersResponse")]
        System.Threading.Tasks.Task<double> FeetToCentimetersAsync(double feet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/MetersToYards", ReplyAction="http://tempuri.org/IConversionService/MetersToYardsResponse")]
        double MetersToYards(double meters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/MetersToYards", ReplyAction="http://tempuri.org/IConversionService/MetersToYardsResponse")]
        System.Threading.Tasks.Task<double> MetersToYardsAsync(double meters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/YardsToMeters", ReplyAction="http://tempuri.org/IConversionService/YardsToMetersResponse")]
        double YardsToMeters(double yards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/YardsToMeters", ReplyAction="http://tempuri.org/IConversionService/YardsToMetersResponse")]
        System.Threading.Tasks.Task<double> YardsToMetersAsync(double yards);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/InchesToCentimeters", ReplyAction="http://tempuri.org/IConversionService/InchesToCentimetersResponse")]
        double InchesToCentimeters(double inches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/InchesToCentimeters", ReplyAction="http://tempuri.org/IConversionService/InchesToCentimetersResponse")]
        System.Threading.Tasks.Task<double> InchesToCentimetersAsync(double inches);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CentimetersToInches", ReplyAction="http://tempuri.org/IConversionService/CentimetersToInchesResponse")]
        double CentimetersToInches(double centimeters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CentimetersToInches", ReplyAction="http://tempuri.org/IConversionService/CentimetersToInchesResponse")]
        System.Threading.Tasks.Task<double> CentimetersToInchesAsync(double centimeters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConversionServiceChannel : Cliente_Web_SOAP.ConversionUnidades.IConversionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConversionServiceClient : System.ServiceModel.ClientBase<Cliente_Web_SOAP.ConversionUnidades.IConversionService>, Cliente_Web_SOAP.ConversionUnidades.IConversionService {
        
        public ConversionServiceClient() {
        }
        
        public ConversionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConversionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConversionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConversionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double CentimetersToFeet(double centimeters) {
            return base.Channel.CentimetersToFeet(centimeters);
        }
        
        public System.Threading.Tasks.Task<double> CentimetersToFeetAsync(double centimeters) {
            return base.Channel.CentimetersToFeetAsync(centimeters);
        }
        
        public double FeetToCentimeters(double feet) {
            return base.Channel.FeetToCentimeters(feet);
        }
        
        public System.Threading.Tasks.Task<double> FeetToCentimetersAsync(double feet) {
            return base.Channel.FeetToCentimetersAsync(feet);
        }
        
        public double MetersToYards(double meters) {
            return base.Channel.MetersToYards(meters);
        }
        
        public System.Threading.Tasks.Task<double> MetersToYardsAsync(double meters) {
            return base.Channel.MetersToYardsAsync(meters);
        }
        
        public double YardsToMeters(double yards) {
            return base.Channel.YardsToMeters(yards);
        }
        
        public System.Threading.Tasks.Task<double> YardsToMetersAsync(double yards) {
            return base.Channel.YardsToMetersAsync(yards);
        }
        
        public double InchesToCentimeters(double inches) {
            return base.Channel.InchesToCentimeters(inches);
        }
        
        public System.Threading.Tasks.Task<double> InchesToCentimetersAsync(double inches) {
            return base.Channel.InchesToCentimetersAsync(inches);
        }
        
        public double CentimetersToInches(double centimeters) {
            return base.Channel.CentimetersToInches(centimeters);
        }
        
        public System.Threading.Tasks.Task<double> CentimetersToInchesAsync(double centimeters) {
            return base.Channel.CentimetersToInchesAsync(centimeters);
        }
    }
}
