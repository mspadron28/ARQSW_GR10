//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EurekaServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movimiento", Namespace="http://schemas.datacontract.org/2004/07/EurekaBankService.Models")]
    public partial class Movimiento : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private string AccionField;
        
        private string CuentaField;
        
        private System.DateTime FechaField;
        
        private double ImporteField;
        
        private int NroMovField;
        
        private string TipoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Accion
        {
            get
            {
                return this.AccionField;
            }
            set
            {
                if ((object.ReferenceEquals(this.AccionField, value) != true))
                {
                    this.AccionField = value;
                    this.RaisePropertyChanged("Accion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cuenta
        {
            get
            {
                return this.CuentaField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CuentaField, value) != true))
                {
                    this.CuentaField = value;
                    this.RaisePropertyChanged("Cuenta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Fecha
        {
            get
            {
                return this.FechaField;
            }
            set
            {
                if ((this.FechaField.Equals(value) != true))
                {
                    this.FechaField = value;
                    this.RaisePropertyChanged("Fecha");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Importe
        {
            get
            {
                return this.ImporteField;
            }
            set
            {
                if ((this.ImporteField.Equals(value) != true))
                {
                    this.ImporteField = value;
                    this.RaisePropertyChanged("Importe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NroMov
        {
            get
            {
                return this.NroMovField;
            }
            set
            {
                if ((this.NroMovField.Equals(value) != true))
                {
                    this.NroMovField = value;
                    this.RaisePropertyChanged("NroMov");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tipo
        {
            get
            {
                return this.TipoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.TipoField, value) != true))
                {
                    this.TipoField = value;
                    this.RaisePropertyChanged("Tipo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Usuario", Namespace="http://schemas.datacontract.org/2004/07/EurekaBankService.Models")]
    public partial class Usuario : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private string ClaveField;
        
        private string CodigoField;
        
        private string EstadoField;
        
        private string NombreUsuarioField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clave
        {
            get
            {
                return this.ClaveField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ClaveField, value) != true))
                {
                    this.ClaveField = value;
                    this.RaisePropertyChanged("Clave");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Codigo
        {
            get
            {
                return this.CodigoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CodigoField, value) != true))
                {
                    this.CodigoField = value;
                    this.RaisePropertyChanged("Codigo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Estado
        {
            get
            {
                return this.EstadoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.EstadoField, value) != true))
                {
                    this.EstadoField = value;
                    this.RaisePropertyChanged("Estado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombreUsuario
        {
            get
            {
                return this.NombreUsuarioField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NombreUsuarioField, value) != true))
                {
                    this.NombreUsuarioField = value;
                    this.RaisePropertyChanged("NombreUsuario");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EurekaServiceReference.IEurekaBankService")]
    public interface IEurekaBankService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/LeerMovimientos", ReplyAction="http://tempuri.org/IEurekaBankService/LeerMovimientosResponse")]
        EurekaServiceReference.Movimiento[] LeerMovimientos(string cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/LeerMovimientos", ReplyAction="http://tempuri.org/IEurekaBankService/LeerMovimientosResponse")]
        System.Threading.Tasks.Task<EurekaServiceReference.Movimiento[]> LeerMovimientosAsync(string cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/RegistrarDeposito", ReplyAction="http://tempuri.org/IEurekaBankService/RegistrarDepositoResponse")]
        int RegistrarDeposito(string cuenta, double importe, string codEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/RegistrarDeposito", ReplyAction="http://tempuri.org/IEurekaBankService/RegistrarDepositoResponse")]
        System.Threading.Tasks.Task<int> RegistrarDepositoAsync(string cuenta, double importe, string codEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/RegistrarRetiro", ReplyAction="http://tempuri.org/IEurekaBankService/RegistrarRetiroResponse")]
        int RegistrarRetiro(string cuenta, double importe, string codEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/RegistrarRetiro", ReplyAction="http://tempuri.org/IEurekaBankService/RegistrarRetiroResponse")]
        System.Threading.Tasks.Task<int> RegistrarRetiroAsync(string cuenta, double importe, string codEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/RealizarTransferencia", ReplyAction="http://tempuri.org/IEurekaBankService/RealizarTransferenciaResponse")]
        int RealizarTransferencia(string cuentaOrigen, string cuentaDestino, double importe, string codEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/RealizarTransferencia", ReplyAction="http://tempuri.org/IEurekaBankService/RealizarTransferenciaResponse")]
        System.Threading.Tasks.Task<int> RealizarTransferenciaAsync(string cuentaOrigen, string cuentaDestino, double importe, string codEmp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/VerificarSaldo", ReplyAction="http://tempuri.org/IEurekaBankService/VerificarSaldoResponse")]
        double VerificarSaldo(string cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/VerificarSaldo", ReplyAction="http://tempuri.org/IEurekaBankService/VerificarSaldoResponse")]
        System.Threading.Tasks.Task<double> VerificarSaldoAsync(string cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/ObtenerCostoMovimiento", ReplyAction="http://tempuri.org/IEurekaBankService/ObtenerCostoMovimientoResponse")]
        double ObtenerCostoMovimiento(string cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/ObtenerCostoMovimiento", ReplyAction="http://tempuri.org/IEurekaBankService/ObtenerCostoMovimientoResponse")]
        System.Threading.Tasks.Task<double> ObtenerCostoMovimientoAsync(string cuenta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/IniciarSesion", ReplyAction="http://tempuri.org/IEurekaBankService/IniciarSesionResponse")]
        EurekaServiceReference.Usuario IniciarSesion(string username, string clave);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEurekaBankService/IniciarSesion", ReplyAction="http://tempuri.org/IEurekaBankService/IniciarSesionResponse")]
        System.Threading.Tasks.Task<EurekaServiceReference.Usuario> IniciarSesionAsync(string username, string clave);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IEurekaBankServiceChannel : EurekaServiceReference.IEurekaBankService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class EurekaBankServiceClient : System.ServiceModel.ClientBase<EurekaServiceReference.IEurekaBankService>, EurekaServiceReference.IEurekaBankService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public EurekaBankServiceClient() : 
                base(EurekaBankServiceClient.GetDefaultBinding(), EurekaBankServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IEurekaBankService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EurekaBankServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(EurekaBankServiceClient.GetBindingForEndpoint(endpointConfiguration), EurekaBankServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EurekaBankServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(EurekaBankServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EurekaBankServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(EurekaBankServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EurekaBankServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public EurekaServiceReference.Movimiento[] LeerMovimientos(string cuenta)
        {
            return base.Channel.LeerMovimientos(cuenta);
        }
        
        public System.Threading.Tasks.Task<EurekaServiceReference.Movimiento[]> LeerMovimientosAsync(string cuenta)
        {
            return base.Channel.LeerMovimientosAsync(cuenta);
        }
        
        public int RegistrarDeposito(string cuenta, double importe, string codEmp)
        {
            return base.Channel.RegistrarDeposito(cuenta, importe, codEmp);
        }
        
        public System.Threading.Tasks.Task<int> RegistrarDepositoAsync(string cuenta, double importe, string codEmp)
        {
            return base.Channel.RegistrarDepositoAsync(cuenta, importe, codEmp);
        }
        
        public int RegistrarRetiro(string cuenta, double importe, string codEmp)
        {
            return base.Channel.RegistrarRetiro(cuenta, importe, codEmp);
        }
        
        public System.Threading.Tasks.Task<int> RegistrarRetiroAsync(string cuenta, double importe, string codEmp)
        {
            return base.Channel.RegistrarRetiroAsync(cuenta, importe, codEmp);
        }
        
        public int RealizarTransferencia(string cuentaOrigen, string cuentaDestino, double importe, string codEmp)
        {
            return base.Channel.RealizarTransferencia(cuentaOrigen, cuentaDestino, importe, codEmp);
        }
        
        public System.Threading.Tasks.Task<int> RealizarTransferenciaAsync(string cuentaOrigen, string cuentaDestino, double importe, string codEmp)
        {
            return base.Channel.RealizarTransferenciaAsync(cuentaOrigen, cuentaDestino, importe, codEmp);
        }
        
        public double VerificarSaldo(string cuenta)
        {
            return base.Channel.VerificarSaldo(cuenta);
        }
        
        public System.Threading.Tasks.Task<double> VerificarSaldoAsync(string cuenta)
        {
            return base.Channel.VerificarSaldoAsync(cuenta);
        }
        
        public double ObtenerCostoMovimiento(string cuenta)
        {
            return base.Channel.ObtenerCostoMovimiento(cuenta);
        }
        
        public System.Threading.Tasks.Task<double> ObtenerCostoMovimientoAsync(string cuenta)
        {
            return base.Channel.ObtenerCostoMovimientoAsync(cuenta);
        }
        
        public EurekaServiceReference.Usuario IniciarSesion(string username, string clave)
        {
            return base.Channel.IniciarSesion(username, clave);
        }
        
        public System.Threading.Tasks.Task<EurekaServiceReference.Usuario> IniciarSesionAsync(string username, string clave)
        {
            return base.Channel.IniciarSesionAsync(username, clave);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEurekaBankService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IEurekaBankService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/EurekaService/");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return EurekaBankServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IEurekaBankService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return EurekaBankServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IEurekaBankService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IEurekaBankService,
        }
    }
}
